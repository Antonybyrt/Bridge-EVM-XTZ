"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const archetype_ts_types_1 = require("@completium/archetype-ts-types");
const taquito_1 = require("@taquito/taquito");
const signer_1 = require("@taquito/signer");
const src_1 = require("../src");
const assert = require('assert');
const endpoint = 'https://ghostnet.tezos.marigold.dev';
const address = 'KT1VR4Rc3ovru3ogpaRu9qtubNLiHQUq54c6';
const signer = new signer_1.InMemorySigner('edskRgfNYuKgoMLobBPBh5GoSXxdnzjsqqTymQRoAALCzz94zxq5DR9h41NmFZkCWAzWZ9NdweXv8BD6hKEJmK9UYWcxK4pnct');
const context = new taquito_1.Context(endpoint, signer, taquito_1.Protocols.PtLimaPtL);
const tezos = new taquito_1.TezosToolkit(endpoint);
const big_map_id = 225028;
describe('DApp', () => {
    it('init', () => {
        tezos.setWalletProvider(new taquito_1.LegacyWalletProvider(context));
        (0, src_1.set_binder_tezos_toolkit)(tezos);
    });
    it('originate', () => __awaiter(void 0, void 0, void 0, function* () {
        const code = [
            {
                "prim": "storage",
                "args": [
                    { "prim": "nat" }
                ]
            },
            {
                "prim": "parameter",
                "args": [
                    { "prim": "unit" }
                ]
            },
            {
                "prim": "code",
                "args": [
                    [{ "prim": "CDR" },
                        {
                            "prim": "NIL",
                            "args": [
                                { "prim": "operation" }
                            ]
                        },
                        { "prim": "PAIR" }]
                ]
            }
        ];
        const res = yield (0, src_1.originate)(code, { int: "0" }, {});
    }));
    it('call', () => __awaiter(void 0, void 0, void 0, function* () {
        yield (0, src_1.call)(address, "set_n", { int: "0" }, {});
    }));
    it('get_call_param & exec batch', () => __awaiter(void 0, void 0, void 0, function* () {
        const c1 = yield (0, src_1.get_call_param)(address, "set_n", { int: "0" }, {});
        const c2 = yield (0, src_1.get_call_param)(address, "size", { string: "" }, {});
        yield (0, src_1.exec_batch)([c1, c2]);
    }));
    it('exec_view', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, src_1.exec_view)(new archetype_ts_types_1.Address(address), "get_n", { prim: "Unit" }, {});
        assert(JSON.stringify(res.value) == `{"int":"0"}`, "Invalid value");
    }));
    it('exec_getter', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, src_1.exec_getter)(new archetype_ts_types_1.Address(address), "tzip4_get_n", { prim: "Unit" }, {});
        assert(JSON.stringify(res.value) == `{"int":"0"}`, "Invalid value");
    }));
    it('get_storage', () => __awaiter(void 0, void 0, void 0, function* () {
        const storage = yield (0, src_1.get_storage)(address.toString());
        // console.log(storage);
        assert(storage.n.toNumber() == 0, "Invalid value");
    }));
    it('get_balance', () => __awaiter(void 0, void 0, void 0, function* () {
        const balance = yield (0, src_1.get_balance)(new archetype_ts_types_1.Address(address));
        // console.log(`balance: ${balance}`);
        assert(balance.to_big_number().toNumber() == 0, "Invalid value");
    }));
    it('get_raw_storage', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, src_1.get_raw_storage)(address);
        assert(JSON.stringify(res, null, 0) == `{"prim":"Pair","args":[{"int":"0"},{"int":"${big_map_id}"}]}`, "Invalid value");
    }));
    it('get_big_map_value', () => __awaiter(void 0, void 0, void 0, function* () {
        const value = yield (0, src_1.get_big_map_value)(BigInt(big_map_id), { int: "2" }, { prim: "nat", annots: [] });
        assert(JSON.stringify(value) == `{"string":"mystr"}`);
    }));
    it('get_big_map_value with value', () => __awaiter(void 0, void 0, void 0, function* () {
        const value = yield (0, src_1.get_big_map_value)(BigInt(big_map_id), { int: "2" }, { prim: "nat", annots: [] }, { prim: "string", annots: [] });
        // console.log(`value: ${value}`);
        assert(value == "mystr", "Invalid value");
    }));
    it('get_big_map_value with key not found', () => __awaiter(void 0, void 0, void 0, function* () {
        const value = yield (0, src_1.get_big_map_value)(BigInt(big_map_id), { int: "3" }, { prim: "nat", annots: [] }, { prim: "string", annots: [] });
        // console.log(`value: ${value}`);
        assert(value === undefined, "Invalid value");
    }));
    it('pack', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = { int: "2" };
        const ty = { prim: "nat", annots: [] };
        const value = (0, src_1.pack)(data, ty);
        assert(value.toString() === "050002", "Invalid value");
    }));
    it('blake2b', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = new archetype_ts_types_1.Bytes("050002");
        const value = (0, src_1.blake2b)(data);
        assert(value.toString() === "5d2525095b5382da2c9c295a739a189382cfaa2ebfa54e320d15bc6f178d6820", "Invalid value");
    }));
});
// describe('Test', () => {
//   it('init', () => {
//     tezos.setWalletProvider(new LegacyWalletProvider(context));
//     set_binder_tezos_toolkit(tezos);
//   })
//   it('exec_view', async () => {
//     const res = await exec_view(new Address("KT1FcUNmyZ255yyfqWL3GC1AGqSY2vKqYwEg"), "already_responded", { int: "1" }, { as: new Address("tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg") });
//     console.log(JSON.stringify(res.value))
//   })
// })
//# sourceMappingURL=main.spec.js.map