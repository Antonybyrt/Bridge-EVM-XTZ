"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_callback_value = exports.deploy_callback = exports.deploy_from_json = exports.originate = exports.deploy = exports.blake2b = exports.pack = exports.exec_batch = exports.exec_getter = exports.exec_view = exports.get_big_map_value = exports.get_raw_storage = exports.get_storage = exports.get_balance = exports.call = exports.to_wallet_transfer_params = exports.get_call_param = exports.set_binder_tezos_toolkit = void 0;
const archetype_ts_types_1 = require("@completium/archetype-ts-types");
const michel_codec_1 = require("@taquito/michel-codec");
const michelson_encoder_1 = require("@taquito/michelson-encoder");
const taquito_1 = require("@taquito/taquito");
const utils_1 = require("@taquito/utils");
const blakejs = __importStar(require("blakejs"));
// global toolkit
let tezos = undefined;
const set_binder_tezos_toolkit = (ttk) => {
    tezos = ttk;
};
exports.set_binder_tezos_toolkit = set_binder_tezos_toolkit;
const get_call_param = (addr, entry, arg, p) => __awaiter(void 0, void 0, void 0, function* () {
    return {
        destination: new archetype_ts_types_1.Address(addr),
        amount: new archetype_ts_types_1.Tez(p.amount ? p.amount.toString() : 0, "mutez"),
        fee: p.fee ? new archetype_ts_types_1.Tez(p.fee.toString(), "mutez") : undefined,
        entrypoint: entry,
        arg: arg
    };
});
exports.get_call_param = get_call_param;
const to_wallet_transfer_params = (addr, name, arg, p) => {
    const amount = p.amount === undefined ? 0 : p.amount.to_big_number().toNumber();
    const fee = p.fee === undefined ? 0 : p.fee.to_big_number().toNumber();
    const transferParam = { to: addr, amount: amount, fee: fee > 0 ? fee : undefined, mutez: true, parameter: { entrypoint: name, value: arg } };
    return transferParam;
};
exports.to_wallet_transfer_params = to_wallet_transfer_params;
const call = (addr, name, arg, p) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const transferParam = (0, exports.to_wallet_transfer_params)(addr, name, arg, p);
    const op = yield (tezos === null || tezos === void 0 ? void 0 : tezos.wallet.transfer(transferParam).send());
    yield (op === null || op === void 0 ? void 0 : op.confirmation(1));
    return Object.assign(Object.assign({}, op), { operation_hash: (_a = op === null || op === void 0 ? void 0 : op.opHash) !== null && _a !== void 0 ? _a : "", storage_size: 0, consumed_gas: 0, paid_storage_size_diff: 0, events: [] });
});
exports.call = call;
const get_balance = (addr) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield (tezos === null || tezos === void 0 ? void 0 : tezos.tz.getBalance(addr.toString()));
    if (res === undefined) {
        throw new Error("Error: get_balance");
    }
    return new archetype_ts_types_1.Tez(res, "mutez");
});
exports.get_balance = get_balance;
const get_storage = (addr) => __awaiter(void 0, void 0, void 0, function* () {
    return tezos === null || tezos === void 0 ? void 0 : tezos.contract.at(addr).then((contract) => __awaiter(void 0, void 0, void 0, function* () {
        return yield contract.storage();
    }));
});
exports.get_storage = get_storage;
const get_raw_storage = (addr) => __awaiter(void 0, void 0, void 0, function* () {
    const x = yield (tezos === null || tezos === void 0 ? void 0 : tezos.rpc.getStorage(addr));
    return x;
});
exports.get_raw_storage = get_raw_storage;
function toMichelsonData(m) {
    return m;
}
const get_big_map_value = (id, data, type_key, type_value) => __awaiter(void 0, void 0, void 0, function* () {
    const d = toMichelsonData(data);
    const input = (0, michel_codec_1.packDataBytes)(d, type_key).bytes;
    const expr = (0, utils_1.encodeExpr)(input);
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        tezos === null || tezos === void 0 ? void 0 : tezos.rpc.getBigMapExpr(id.toString(), expr).then(res => {
            if (type_value) {
                const schema = new michelson_encoder_1.Schema(type_value);
                const data = schema.Execute(res);
                resolve(data);
            }
            else {
                resolve(res);
            }
        }).catch(x => {
            if (x.status == 404) {
                resolve(undefined);
            }
            else {
                reject(x);
            }
        });
    }));
});
exports.get_big_map_value = get_big_map_value;
const exec_view = (address, entry, arg, params) => __awaiter(void 0, void 0, void 0, function* () {
    var _b, _c;
    const chain_id = yield (tezos === null || tezos === void 0 ? void 0 : tezos.rpc.getChainId());
    if (!chain_id) {
        throw new Error("exec_view: cannot fetch chain_id");
    }
    const res = yield (tezos === null || tezos === void 0 ? void 0 : tezos.rpc.runScriptView({
        contract: address.toString(),
        view: entry,
        input: arg,
        chain_id: chain_id,
        payer: (_b = params.as) === null || _b === void 0 ? void 0 : _b.toString(),
        source: (_c = params.as) === null || _c === void 0 ? void 0 : _c.toString()
    }));
    return { value: res === null || res === void 0 ? void 0 : res.data, dummy: 0 };
});
exports.exec_view = exec_view;
const exec_getter = (address, entry, arg, params) => __awaiter(void 0, void 0, void 0, function* () {
    var _d, _e;
    const chain_id = yield (tezos === null || tezos === void 0 ? void 0 : tezos.rpc.getChainId());
    if (!chain_id) {
        throw new Error("exec_getter: cannot fetch chain_id");
    }
    const res = yield (tezos === null || tezos === void 0 ? void 0 : tezos.rpc.runView({
        contract: address.toString(),
        entrypoint: entry,
        input: arg,
        chain_id: chain_id,
        payer: (_d = params.as) === null || _d === void 0 ? void 0 : _d.toString(),
        source: (_e = params.as) === null || _e === void 0 ? void 0 : _e.toString()
    }));
    return { value: res === null || res === void 0 ? void 0 : res.data, events: [], dummy: 0 };
});
exports.exec_getter = exec_getter;
const exec_batch = (callParameters) => __awaiter(void 0, void 0, void 0, function* () {
    const paramsWithKinds = callParameters.map(x => {
        return {
            kind: taquito_1.OpKind.TRANSACTION,
            to: x.destination.toString(),
            amount: x.amount.to_big_number().toNumber(),
            fee: x.fee ? x.fee.to_big_number().toNumber() : undefined,
            parameter: {
                entrypoint: x.entrypoint,
                value: toMichelsonData(x.arg)
            },
            mutez: true
        };
    });
    const batch = tezos === null || tezos === void 0 ? void 0 : tezos.wallet.batch(paramsWithKinds);
    if (batch === undefined) {
        throw new Error("Error: Invalid batch");
    }
    const op = yield batch.send();
    yield (op === null || op === void 0 ? void 0 : op.confirmation(1));
    return Object.assign(Object.assign({}, op), { events: [], dummy: 0 });
});
exports.exec_batch = exec_batch;
const pack = (obj, typ) => {
    return new archetype_ts_types_1.Bytes((0, michel_codec_1.packDataBytes)(obj, typ).bytes);
};
exports.pack = pack;
const blake2b = (b) => {
    const blakeHash = blakejs.blake2b((0, utils_1.hex2buf)(b.toString()), undefined, 32);
    const res = (0, utils_1.buf2hex)(blakeHash.buffer);
    return new archetype_ts_types_1.Bytes(res);
};
exports.blake2b = blake2b;
const deploy = (path, parameters, params) => {
    throw new Error("@completium/dapp-ts: 'deploy' not implemented.");
};
exports.deploy = deploy;
const originate = (code, storage, p) => __awaiter(void 0, void 0, void 0, function* () {
    const amount = p.amount === undefined ? 0 : p.amount.to_big_number().toNumber();
    const fee = p.fee === undefined ? 0 : p.fee.to_big_number().toNumber();
    const originateParam = {
        code: code,
        init: storage,
        balance: amount,
        fee: fee > 0 ? fee : undefined,
        mutez: true,
    };
    const op = yield (tezos === null || tezos === void 0 ? void 0 : tezos.wallet.originate(originateParam).send());
    const c = yield (op === null || op === void 0 ? void 0 : op.originationOperation());
    const contracts = c === null || c === void 0 ? void 0 : c.metadata.operation_result.originated_contracts;
    if (contracts) {
        const address = contracts[0];
        yield (op === null || op === void 0 ? void 0 : op.confirmation(1));
        return Object.assign(Object.assign({}, op), { address: address });
    }
    else {
        throw ("Adress not found");
    }
});
exports.originate = originate;
const deploy_from_json = (name, code, storage, p) => __awaiter(void 0, void 0, void 0, function* () {
    throw new Error("@completium/dapp-ts: 'deploy_from_json' not implemented.");
});
exports.deploy_from_json = deploy_from_json;
const deploy_callback = (name, mt, p) => __awaiter(void 0, void 0, void 0, function* () {
    throw new Error("@completium/dapp-ts: 'deploy_callback' not implemented.");
});
exports.deploy_callback = deploy_callback;
const get_callback_value = (callback_addr, mich_to) => __awaiter(void 0, void 0, void 0, function* () {
    throw new Error("@completium/dapp-ts: 'get_callback_value' not implemented.");
});
exports.get_callback_value = get_callback_value;
//# sourceMappingURL=main.js.map