import { Address, ArchetypeTypeArg, BatchResult, Bytes, CallParameter, CallResult, DeployResult, Micheline, MichelineType, Tez, ViewResult, GetterResult } from "@completium/archetype-ts-types";
import { TezosToolkit, WalletTransferParams } from '@taquito/taquito';
export declare const set_binder_tezos_toolkit: (ttk: TezosToolkit) => void;
export interface Parameters {
    amount?: Tez;
    fee?: Tez;
    as?: Address;
}
export declare const get_call_param: (addr: string, entry: string, arg: Micheline, p: Parameters) => Promise<CallParameter>;
export declare const to_wallet_transfer_params: (addr: string, name: string, arg: Micheline, p: Parameters) => WalletTransferParams;
export declare const call: (addr: string, name: string, arg: Micheline, p: Parameters) => Promise<CallResult>;
export declare const get_balance: (addr: Address) => Promise<Tez>;
export declare const get_storage: (addr: string) => Promise<any>;
export declare const get_raw_storage: (addr: string) => Promise<Micheline>;
export declare const get_big_map_value: (id: BigInt, data: Micheline, type_key: MichelineType, type_value?: MichelineType) => Promise<any>;
export declare const exec_view: (address: Address, entry: string, arg: Micheline, params: Parameters) => Promise<ViewResult>;
export declare const exec_getter: (address: Address, entry: string, arg: Micheline, params: Parameters) => Promise<GetterResult>;
export declare const exec_batch: (callParameters: CallParameter[]) => Promise<BatchResult>;
export declare const pack: (obj: Micheline, typ?: MichelineType) => Bytes;
export declare const blake2b: (b: Bytes) => Bytes;
export declare const deploy: (path: string, parameters: any, params: any) => Promise<DeployResult>;
export declare const originate: (code: Micheline, storage: Micheline, p: Parameters) => Promise<DeployResult>;
export declare const deploy_from_json: (name: string, code: any, storage: Micheline, p: Partial<Parameters>) => Promise<DeployResult>;
export declare const deploy_callback: (name: string, mt: MichelineType, p: Partial<Parameters>) => Promise<DeployResult>;
export declare const get_callback_value: <T extends ArchetypeTypeArg>(callback_addr: string, mich_to: (_: any) => T) => Promise<T>;
//# sourceMappingURL=main.d.ts.map